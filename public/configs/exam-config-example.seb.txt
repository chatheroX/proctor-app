
# ZenTest - Example SEB Configuration File Instructions
#
# This file provides guidance on how to configure Safe Exam Browser (SEB)
# for use with the ZenTest platform. You need to use the SEB Configuration Tool
# to create an actual `exam-config.seb` file based on these recommendations and
# place it in your project's `/public/configs/` directory.
#
# The ZenTest application will launch SEB and direct it to YOUR_APP_DOMAIN/seb/entry/[token].
# SEB will use its currently active or default settings unless a student manually
# loads a specific .seb configuration file like the one described below.
#
# ==============================================================================
# CRITICAL SETTINGS for your `exam-config.seb` file:
# ==============================================================================
#
# 1. Start URL:
#    - This is the MOST IMPORTANT setting inside your `.seb` file.
#    - Set this to: https://YOUR_APP_DOMAIN/seb/entry
#    - Replace `YOUR_APP_DOMAIN` with your actual deployed application domain 
#      (e.g., `https://proctorx.netlify.app` if that's your live site).
#    - DO NOT include any query parameters or hash parameters like examId or token here.
#      The application will pass the token as part of the path when SEB is launched
#      (e.g., sebs://YOUR_APP_DOMAIN/seb/entry/GENERATED_TOKEN).
#
# 2. General -> Use Browser Exam Key:
#    - Recommended: Enable this and generate a unique key.
#    - The `/seb/live-test` page in your ZenTest app would ideally send this key back in
#      a request header (e.g., `X-SafeExamBrowser-BrowserExamKey`) for server-side validation.
#      (Note: This server-side validation part is not implemented in the current ZenTest AI prompt version).
#
# 3. Config File -> Use Config Key:
#    - Recommended: Enable this and generate a unique key.
#    - Similar to Browser Exam Key, this can be used for server-side validation of the config file.
#      (Note: Also not implemented for server-side validation in current ZenTest AI prompt version).
#
# 4. Browser -> Security:
#    - Enable "Block pop-up windows"
#    - Enable "Block any file download/upload" (unless your exam specifically needs uploads)
#    - Enable "Enable JavaScript"
#    - Enable "Block plug-ins"
#    - Enable "Block Java"
#    - Enable "Block general downloads"
#
# 5. Browser -> Browser User Agent:
#    - Select "SEB for Windows" or "SEB for macOS" or "SEB for iOS" as appropriate.
#    - Enable "Append SEB version to user agent".
#
# 6. Exam -> Prohibited Processes:
#    - Add common screen sharing, remote desktop, communication, and virtual machine processes.
#      Examples: TeamViewer, AnyDesk, Skype, Discord, vmware.exe, VirtualBox.exe.
#
# 7. Exam -> Allowed Processes:
#    - Generally, leave this empty unless absolutely necessary.
#
# 8. Exam -> Permitted Keys:
#    - Uncheck "Enable Ctrl-N (New Window)"
#    - Uncheck "Enable F1, F2, ..., F12" (Function Keys)
#    - Uncheck "Enable Ctrl-Alt-Del"
#    - Uncheck "Enable Alt-Tab and Win/Cmd-Tab"
#    - Uncheck "Enable Alt-Esc"
#    - Uncheck "Enable Alt-F4"
#    - Uncheck "Enable Esc" (except for quit link)
#    - Uncheck "Enable right mouse button"
#    - Consider what input is needed for your exam (A-Z, 0-9, Space, Enter, Backspace, Arrow Keys usually).
#      The ZenTest exam interface primarily uses mouse clicks for MCQs.
#
# 9. Exam -> Quit/Restart Password:
#    - Set a quit password if you want to prevent easy exits.
#    - Alternatively, enable "Allow user to quit SEB" and use `seb://quit` links.
#      (The ZenTest `/seb/live-test` page will attempt to trigger `seb://quit` after submission).
#
# 10. Network -> URL Filter:
#     - This is advanced. For a simpler setup, ensure your `Start URL` is correct.
#     - If you use URL filtering, ensure you allow:
#       - `YOUR_APP_DOMAIN` (e.g., `https://proctorx.netlify.app`)
#       - Any CDNs or services your app uses (e.g., for fonts, Supabase API).
#       - Block all other URLs by default (`*://*/*` with action "Block").
#
# ==============================================================================
# How ZenTest Launches SEB with this Simplified Approach:
# ==============================================================================
#
# 1. Student enters exam code in the regular browser on YOUR_APP_DOMAIN.
# 2. ZenTest app generates a secure, temporary token.
# 3. ZenTest app constructs a launch URL: `sebs://YOUR_APP_DOMAIN/seb/entry/THE_GENERATED_TOKEN`
# 4. This URL tells SEB to open YOUR_APP_DOMAIN/seb/entry/THE_GENERATED_TOKEN.
# 5. The page `/seb/entry/[token]` (running inside SEB) then:
#    a. Validates the token with the ZenTest server.
#    b. Fetches exam details.
#    c. Performs client-side system checks.
#    d. If all good, navigates to `/seb/live-test` to start the actual exam.
#
# The security settings active during the exam will be those configured in the SEB
# instance on the student's computer. If they have loaded your recommended `.seb` file
# (created from these instructions), then those settings will apply. Otherwise,
# SEB's default or last used settings will apply. The client-side JavaScript checks
# in ZenTest provide an additional layer of security.
#
# ==============================================================================
# Creating Your `exam-config.seb` File:
# ==============================================================================
#
# - Download and install the SEB Configuration Tool for your operating system
#   from https://safeexambrowser.org/download_en.html.
# - Use the tool to apply the settings recommended above, especially the Start URL.
# - Save the configuration as `exam-config.seb`.
# - Place this `exam-config.seb` file into the `/public/configs/` directory of your
#   ZenTest Next.js project.
# - Deploy your application.
#
# Your students would ideally configure their SEB client by opening this
# `exam-config.seb` file (e.g., by downloading it from an instruction page you provide,
# or if distributed by an institution) before taking an exam to ensure all security
# measures are active. The direct launch from ZenTest will then open the exam within
# this pre-configured SEB environment.
#
# For the most secure setup, consider using SEB Server or an LMS integration,
# which allows for dynamic delivery and enforcement of SEB configurations.
# The current ZenTest AI prompt implements a client-launched SEB approach.
#
################################################################################
# This file is an EXAMPLE and INSTRUCTION GUIDE.
# You MUST use the SEB Configuration Tool to create the actual .seb file.
################################################################################
