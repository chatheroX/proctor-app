
This is an example of settings you might configure in your actual `exam-config.seb` file
using the SEB Configuration Tool.

**IMPORTANT**: 
1. You MUST create an actual `exam-config.seb` file using the SEB Configuration Tool.
2. Place this `exam-config.seb` file in your project's `/public/configs/` directory.
3. When SEB is launched by the application, it will try to fetch this file.
   Your web server (Netlify) MUST serve this file with the correct MIME type
   (e.g., `application/seb` or `application/octet-stream`) and not as an HTML page.
   If Netlify serves an HTML 404 page or your app's index.html instead, SEB will fail to load the config.

--- Key Settings to Configure in SEB Configuration Tool ---

1.  **General -> Start URL**:
    *   Set this to: `https://YOUR_APP_DOMAIN/seb/exam-view`
    *   Replace `YOUR_APP_DOMAIN` with your actual deployed application domain (e.g., `https://proctorx.netlify.app` or `https://your-custom-domain.com`).
    *   **DO NOT** include any query parameters or hash parameters here (like `?examId=...` or `#examId=...`).
        The application will pass `examId` and `token` to this Start URL via the SEB launch link.
        The `/seb/exam-view` page in your Next.js app is designed to read these from the URL query parameters.

2.  **Config File -> Use SEB settings file**: (This is how SEB uses the file)
    *   Starting an exam: Choose "Use existing .seb file" and point to this one, or configure SEB to start with this file for a specific exam link.

3.  **Network -> URL Filter**:
    *   Enable URL filtering.
    *   Action: Block
    *   Expression for allowed URLs (examples, adjust to your domain):
        *   `^https://YOUR_APP_DOMAIN/seb/.*` (Allows all pages under /seb/)
        *   `^https://YOUR_APP_DOMAIN/api/.*` (If your app makes API calls)
        *   `^https://fonts.googleapis.com/.*` (If using Google Fonts)
        *   `^https://fonts.gstatic.com/.*`
        *   `^https://api.dicebear.com/.*` (If using DiceBear avatars)
        *   `^https://images.unsplash.com/.*` (If using Unsplash images)
        *   (Add any other domains your exam pages might need to access for resources like images, APIs)
    *   Make sure to also block common distracting sites.

4.  **Browser -> Browser Exam Key & Config Key**:
    *   Generate and copy these keys. Your server-side (if you implement BEK/CK validation) would need to know the expected Browser Exam Key to validate requests.
    *   For client-side only, these mainly ensure the settings aren't easily tampered with if SEB is reconfigured locally.

5.  **Applications -> Prohibited Processes**:
    *   Add common screen capture tools, communication apps, remote desktop tools, etc.

6.  **User Interface**:
    *   Show SEB Task Bar: Optional, but can be useful.
    *   Show Reload Button: **Disable** this if your app handles exam submission and you don't want mid-exam reloads from SEB's UI.
    *   Enable "Quit SEB" link/button: `seb://quit`
        *   Configure it to only be active *before* the exam starts or *after* it's submitted, if your UI handles this. SEB settings allow defining when the quit button is enabled.

7.  **Exam**:
    *   Enable "Quit SEB" password: Optional, for an extra layer if students need to quit exceptionally.

8.  **Security**:
    *   Enable "Block screen capture / recording".
    *   Enable "Block virtual machine".
    *   Enable "Prevent switching to other applications".
    *   Enable "Disable developer tools".

9.  **Keyboard**: (These settings are very powerful and should be primary over JS attempts)
    *   Enable specific keys: A-Z, a-z, 0-9, Arrow Keys, Space, Backspace, Enter.
    *   Disable function keys (F1-F12).
    *   Disable modifier keys (Ctrl, Alt, Shift combinations, Cmd/Windows key).
    *   Disable specific keys like Esc, Tab (unless explicitly needed for accessibility within a form input).

**Important Note on Dynamic Parameters & SEB Configuration:**
The method we are using (`sebs://YOUR_APP_DOMAIN/seb/exam-view?examId=...&token=...`) directly launches the `/seb/exam-view` page with query parameters. This means the `.seb` file from `/public/configs/exam-config.seb` is **NOT** being downloaded and processed by SEB through this specific launch link.

If you want SEB to first download a configuration file and then use its `startURL`, the `join-exam` page should launch SEB like this:
`sebs://YOUR_APP_DOMAIN/configs/exam-config.seb#examId=...&token=...`
And then, the `startURL` *inside* `exam-config.seb` (which you configure using the SEB tool) would be `https://YOUR_APP_DOMAIN/seb/exam-view`. The `/seb/exam-view` page would then read `examId` and `token` from `window.location.hash`.

The current approach (direct launch of `/seb/exam-view` with query params) simplifies the initial SEB launch from the web app but means the specific security settings from a custom `.seb` file (like Browser Exam Key, detailed URL filtering, prohibited processes) are NOT automatically enforced by *this specific launch method*. SEB will use its default or last-used settings. Your JavaScript-based security checks in `seb-utils.ts` and within the SEB pages become more important.
For maximum security with full .seb file enforcement, the student would typically start SEB with the .seb file itself, or your `join-exam` page would use the `sebs://path/to/config.seb#params` method.

**The current code uses a direct launch to `/seb/exam-view` with query parameters.**

If you want to revert to making SEB download the config file first:
1.  The `join-exam/page.tsx` should construct the `sebLaunchUrl` to point to the `.seb` file with hash parameters for `examId` and `token`.
2.  Your `exam-config.seb` (created with the SEB Config Tool) *must* have its `startURL` set to `https://YOUR_APP_DOMAIN/seb/exam-view` (no parameters here).
3.  The `/seb/exam-view/page.tsx` (and its client component) *must* read `examId` and `token` from `window.location.hash`.

Choose the approach that best fits your security requirements and deployment complexity. The direct launch is simpler but relies more on SEB's existing state and client-side JS checks.
