
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface QuestionOption {
  id: string; // Unique ID for the option
  text: string;
}

export interface Question {
  id: string; // Unique ID for the question
  text: string;
  options: QuestionOption[];
  correctOptionId: string; // ID of the correct QuestionOption
}

// Main user table, storing credentials and basic info
export interface ProctorXTableType {
  user_id: string; // Primary Key (6-character ID, generated by app)
  email: string; // User's login email (must be unique)
  pass: string;  // Plaintext password (SECURITY RISK - FOR TESTING ONLY)
  name: string;  // User's full name
  role: 'student' | 'teacher'; // User's role
  created_at?: string;
}

export type ExamStatus = 'Published' | 'Ongoing' | 'Completed'; // Removed 'Draft'

export interface Database {
  public: {
    Tables: {
      proctorX: {
        Row: ProctorXTableType;
        Insert: Omit<ProctorXTableType, 'created_at' | 'user_id'> & { user_id?: string }; // user_id can be optional if auto-generated logic is outside
        Update: Partial<Omit<ProctorXTableType, 'created_at'>>;
      };
      ExamX: {
        Row: {
          exam_id: string; // UUID
          teacher_id: string; // Foreign key to proctorX.user_id
          title: string;
          description: string | null;
          duration: number; // in minutes
          allow_backtracking: boolean;
          questions: Question[] | null;
          exam_code: string; // Unique short code for students to join
          status: ExamStatus;
          start_time: string | null; // ISO string for start datetime
          end_time: string | null;   // ISO string for end datetime
          created_at: string;
          updated_at: string;
        };
        Insert: {
          exam_id?: string; // UUID, can be auto-generated by DB
          teacher_id: string;
          title: string;
          description?: string | null;
          duration: number;
          allow_backtracking?: boolean;
          questions?: Question[] | null;
          exam_code: string;
          status?: ExamStatus; // Default to 'Published'
          start_time?: string | null;
          end_time?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: Partial<{ // All fields optional for update
          teacher_id: string;
          title: string;
          description: string | null;
          duration: number;
          allow_backtracking: boolean;
          questions: Question[] | null;
          exam_code: string;
          status: ExamStatus;
          start_time: string | null;
          end_time: string | null;
          updated_at: string;
        }>;
      };
      // Add ExamSubmissionsX table definition here when ready
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}

export type CustomUser = {
  user_id: string; // 6-char ID
  email: string;
  name: string | null;
  role: 'student' | 'teacher' | null;
};

export type ProctorXTable = Database['public']['Tables']['proctorX'];
export type Exam = Database['public']['Tables']['ExamX']['Row'];
export type ExamInsert = Database['public']['Tables']['ExamX']['Insert'];
export type ExamUpdate = Database['public']['Tables']['ExamX']['Update'];


export type FlaggedEventType =
  | 'visibility_hidden'
  | 'visibility_visible'
  | 'fullscreen_entered'
  | 'fullscreen_exited'
  | 'blur'
  | 'focus';

export interface FlaggedEvent {
  type: FlaggedEventType;
  timestamp: Date;
  studentId: string; // Should be CustomUser['user_id']
  examId: string; // Should be Exam['exam_id'] (UUID)
  details?: string;
}
