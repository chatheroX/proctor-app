
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface QuestionOption {
  id: string; // Unique ID for the option
  text: string;
}

export interface Question {
  id: string; // Unique ID for the question
  text: string;
  options: QuestionOption[];
  correctOptionId: string; // ID of the correct QuestionOption
}

export interface Database {
  public: {
    Tables: {
      proctorX: { // User table
        Row: {
          user_id: string; // Primary Key (6-character ID, generated by app)
          email: string; // User's login email (must be unique)
          pass: string;  // Plaintext password (SECURITY RISK - FOR TESTING ONLY)
          name: string;  // User's full name
          role: 'student' | 'teacher'; // User's role
          created_at?: string;
        };
        Insert: {
          user_id: string;
          email: string;
          pass: string;
          name: string;
          role: 'student' | 'teacher';
          created_at?: string;
        };
        Update: {
          user_id?: string;
          email?: string;
          pass?: string;
          name?: string;
          role?: 'student' | 'teacher';
          created_at?: string;
        };
      };
      ExamX: { // Exam table
        Row: {
          exam_id: string; // UUID, Primary Key
          teacher_id: string; // Foreign Key to proctorX.user_id (teacher who created it)
          title: string;
          description: string | null;
          duration: number; // in minutes
          allow_backtracking: boolean;
          questions: Question[] | null; // JSONB stored as array of Question objects
          exam_code: string; // Unique code for students to join (e.g., 6-8 char alphanumeric)
          status: 'Draft' | 'Published' | 'Ongoing' | 'Completed'; // Exam lifecycle status
          created_at: string;
          updated_at: string;
        };
        Insert: {
          exam_id?: string; // Optional on insert, DB defaults to gen_random_uuid()
          teacher_id: string;
          title: string;
          description?: string | null;
          duration: number;
          allow_backtracking?: boolean;
          questions?: Question[] | null;
          exam_code: string; // Should be generated and unique
          status?: 'Draft' | 'Published' | 'Ongoing' | 'Completed';
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          exam_id?: string;
          teacher_id?: string;
          title?: string;
          description?: string | null;
          duration?: number;
          allow_backtracking?: boolean;
          questions?: Question[] | null;
          exam_code?: string;
          status?: 'Draft' | 'Published' | 'Ongoing' | 'Completed';
          updated_at?: string; // Auto-updated by trigger
        };
      };
      // Potential future table for exam submissions
      // ExamSubmissionsX: {
      //   Row: {
      //     submission_id: string; // PK
      //     exam_id: string; // FK to ExamX
      //     student_id: string; // FK to proctorX (student who took it)
      //     answers: Json; // e.g., { "questionId1": "optionId2", ... }
      //     score: number | null;
      //     submitted_at: string;
      //     flagged_events: FlaggedEvent[] | null;
      //   }
      //   // Insert, Update types
      // }
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}

// Custom user type for the application context
export type CustomUser = {
  user_id: string; // 6-character ID from proctorX
  email: string;
  name: string | null;
  role: 'student' | 'teacher' | null; // Role can be null if not set or during initial loading
};

export type ProctorXTable = Database['public']['Tables']['proctorX'];
export type ExamXTable = Database['public']['Tables']['ExamX'];
export type Exam = ExamXTable['Row'];

// Copied from use-activity-monitor.ts to avoid circular dependency if types.ts is imported there
export type FlaggedEventType = 
  | 'visibility_hidden' 
  | 'visibility_visible' 
  | 'fullscreen_entered' 
  | 'fullscreen_exited'
  | 'blur'
  | 'focus';

export interface FlaggedEvent {
  type: FlaggedEventType;
  timestamp: Date; // Will be stringified for DB storage
  studentId: string;
  examId: string;
  details?: string; 
}

    